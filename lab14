#include <iostream>
#include <map>
#include <string>
#include <list>
#include <stack>
#include <queue>
#include <vector>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>



using namespace std;

//problem10
void show(const unordered_set<int>& s) {
    for (auto it = s.begin(); it != s.end(); ++it) {
        cout << *it << " ";
    }
    cout << endl;
}


//problem9

void show(const set<int>& s) {
    for (auto it = s.begin(); it != s.end(); ++it) {
        cout << *it << " ";
    }
    cout << endl;
}

//problem8

bool isGoodSequence(const vector<int>& sequence) {
    unordered_map<int, int> countMap;
    
    // Count occurrences of each number in the sequence
    for (int num : sequence) {
        countMap[num]++;
    }
    
    // Check if the value of a given number x occurs x times in the sequence
    for (const auto& pair : countMap) {
        if (pair.second != pair.first) {
            return false;
        }
    }
    
    return true;
}
//problem16

int getLastDigit(int num) {
    return abs(num) % 10;
}

// Function to check if the sequence is symmetric
bool isSymmetric(const vector<int>& vec) {
    int n = vec.size();
    for (int i = 0; i < n / 2; ++i) {
        if (getLastDigit(vec[i]) != getLastDigit(vec[n - i - 1])) {
            return false;
        }
    }
    return true;
}


//problem4 
void displayMap(const map<int, double>& myMap) {
    for (const auto& pair : myMap) {
        cout << "(" << pair.first << ", " << pair.second << ")" << endl;
    }
}

//problem5

void displayMapp(const list<pair<string, int>>& myList) {
    for (const auto& pair : myList) {
        cout << "(" << pair.first << ", " << pair.second << ")" << endl;
    }
}


//problem17

void displayQueue(queue<int> q) {
    while (!q.empty()) {
        cout << q.front() << " ";
        q.pop();
    }
    cout << endl;
}

// Function that deletes all elements from the queue
void clearQueue(queue<int>& q) {
    while (!q.empty()) {
        q.pop();
    }
}

int main() {




    //problem1
    map<int,int> m;
    m[1]=1;
    m[2]=4;
    m[3]=9;
    m[4]=16;
    m[5]=25;
    cout<<"Elelments in the map: ";
    for (const auto &pair:m){
        cout<<"["<<pair.first<<","<<pair.second<<"]"<<endl;


    }
    cout<<endl;
    for(const auto &pair:m){
        cout<<"Square of "<<pair.first<<" is "<<pair.second<<endl;

    }

//problem 2
    map<int,string> math;
    math[4]="Mike";
    math[3]="Elena";
    math[1]="David";
    math[5]="George";
    math[2]="Indira";
    for (const auto &pair:math){
        cout<<pair.first<<" place is "<< pair.second<<endl;
    }

//problem3
    map<char, int> alphabet_positions;
    for (char c = 'A'; c <= 'Z'; ++c) {
        alphabet_positions[c] = c - 'A' + 1;
    }

    // Ask the user to input a letter
    char letter;
    cout << "Enter a letter (uppercase): ";
    cin >> letter;

    // Convert the input letter to uppercase
    letter = toupper(letter);

    // Check if the input is a valid uppercase letter
    if (isalpha(letter) && isupper(letter)) {
        // Get the position of the letter from the map
        int position = alphabet_positions[letter];
        cout << "The position of " << letter << " in the alphabet is " << position << "." << endl;
    } else {
        cout << "Please enter a valid uppercase letter." << endl;
    }

//problem4
map<int, double> myMap = {
            {4, 7.5},
            {25, 6.01},
            {-9, 3.2},
            {12, 5.16}
    };

    // 2. Output each pair of the map
    cout << "Initial map:" << endl;
    displayMap(myMap);

    // 3. Insert a new pair (3, 3.75) and display resulting map
    myMap.insert({3, 3.75});
    cout << "\nMap after inserting (3, 3.75):" << endl;
    displayMap(myMap);

    // 4. Insert a new pair (-10, 4.3) and display resulting map
    myMap.insert({-10, 4.3});
    cout << "\nMap after inserting (-10, 4.3):" << endl;
    displayMap(myMap);

    // 5. Using method .find(), find key 12, store result inside iterator it and print the value
    auto it = myMap.find(12);
    if (it != myMap.end()) {
        cout << "\nValue for key 12: " << it->second << endl;
    } else {
        cout << "\nKey 12 not found." << endl;
    }

    // 6. Using the same iterator, delete pair with key 12 and print resulting map
    if (it != myMap.end()) {
        myMap.erase(it);
        cout << "\nMap after deleting key 12:" << endl;
        displayMap(myMap);
    }

    // 7. Modify a value whose key is -9 to 4.44 and print resulting map
    myMap[-9] = 4.44;
    cout << "\nMap after modifying value for key -9 to 4.44:" << endl;
    displayMap(myMap);

//prblem5 
unordered_map<string, int> myUnorderedMap = {
            {"Earth", 3},
            {"Mercury", 1},
            {"Venus", 2}
    };
    list<pair<string, int>> myList(myUnorderedMap.begin(), myUnorderedMap.end());

    // 2. Display all pairs of the unordered map
    cout << "Initial map:" << endl;
    displayMapp(myList);

    // 3. Insert a pair ("Mars", 4) into the beginning and display the result
    myList.push_front({"Mars", 4});
    cout << "\nMap after inserting (\"Mars\", 4) into the beginning:" << endl;
    displayMapp(myList);

    // 4. Insert a pair ("Saturn", 6) into position 3 and then insert ("Neptune", 8) into the same position, display the result
    auto i = myList.begin();
    advance(i, 3);
    myList.insert(i, {"Saturn", 6});
    i = myList.begin();
    advance(i, 3);
    myList.insert(i, {"Neptune", 8});
    cout << "\nMap after inserting (\"Saturn\", 6) and (\"Neptune\", 8) into position 3:" << endl;
    displayMapp(myList);

    // 5. Display the size of the map
    cout << "\nSize of the map: " << myList.size() << endl;

    // 6. Delete an element with key "Venus" and display the resulting map
    myList.remove_if([](const pair<string, int>& p) { return p.first == "Venus"; });
    cout << "\nMap after deleting key \"Venus\":" << endl;
    displayMapp(myList);

//problem6

 // 1. Create a multimap with the given pairs
    multimap<int, int> myMultimap = {{100, 3}, {150, 4}, {100, 90}};

    // 2. Using method .count() print how many keys are equal to 100
    cout << "Number of keys equal to 100: " << myMultimap.count(100) << endl;

    // 3. Insert the following pairs
    myMultimap.insert({200, 32});
    myMultimap.insert({100, -12});
    myMultimap.insert({90, 45});

    // 4. Find the upper bound of key 100 and store result inside iterator variable
    auto iter = myMultimap.upper_bound(100);

    // 5. Using iterator print keys and values of next two elements that are at upper bound
    cout << "Keys and values of next two elements at upper bound of key 100:" << endl;
    for (int count = 0; count < 2 && iter != myMultimap.end(); ++count, ++iter) {
        cout << "Key: " << iter->first << ", Value: " << iter->second << endl;
    }

    // 6. Using methods .find() and .erase(), delete elements where key is 100, leaving only one pair
    auto range = myMultimap.equal_range(100);
    auto findIter = myMultimap.find(100);
    if (findIter != myMultimap.end()) {
        myMultimap.erase(range.first, range.second);
    }

    // Display resulting map
    cout << "Resulting map after deleting elements with key 100:" << endl;
    for (const auto& pair : myMultimap) {
        cout << "Key: " << pair.first << ", Value: " << pair.second << endl;
    }

//problem7
 int numUsers;
    cout << "Enter the number of users who want to register: ";
    cin >> numUsers;
    
    unordered_set<string> registeredNames;
    vector<string> uniqueNames;
    
    for (int i = 0; i < numUsers; ++i) {
        string name;
        cin >> name;
        
        if (registeredNames.find(name) == registeredNames.end()) {
            // If the name doesn't exist, store it and print OK
            registeredNames.insert(name);
            uniqueNames.push_back(name);
            cout << "OK" << endl;
        } else {
            // If the name already exists, add a digit to the end and store it
            int digit = 1;
            string newName = name + to_string(digit);
            while (registeredNames.find(newName) != registeredNames.end()) {
                ++digit;
                newName = name + to_string(digit);
            }
            registeredNames.insert(newName);
            uniqueNames.push_back(newName);
            cout << newName << endl;
        }
    }
    
    cout << "Registered Names:" << endl;
    for (const auto& name : uniqueNames) {
        cout << name << endl;
    }

//problem8
int numValues;
    cout << "Enter the number of values in the sequence: ";
    cin >> numValues;
    
    vector<int> sequence(numValues);
    cout << "Enter the sequence: ";
    for (int i = 0; i < numValues; ++i) {
        cin >> sequence[i];
    }
    
    if (isGoodSequence(sequence)) {
        cout << "The sequence is good." << endl;
    } else {
        cout << "The sequence is not good." << endl;
    }
    
//problem9
set<int> s;

    // Insert values into the set
    s.insert(5);
    s.insert(39);
    s.insert(10);
    s.insert(64);
    s.insert(82);
    s.insert(35);
    s.insert(10); // Duplicate value
    s.insert(54);

    cout << "Elements in sorted order: ";
    show(s);
//problem10
unordered_set<int> s;

    // Insert values into the unordered set
    s.insert(5);
    s.insert(39);
    s.insert(10);
    s.insert(64);
    s.insert(82);
    s.insert(35);
    s.insert(10); // Duplicate value
    s.insert(54);

    cout << "All elements in the set:" << endl;
    show(s);



//problem 18

    // 1. Push numbers: 43, 90, 100, 30, 28, 1, 34 into a stack
    stack<int> myStack;
    myStack.push(43);
    myStack.push(90);
    myStack.push(100);
    myStack.push(30);
    myStack.push(28);
    myStack.push(1);
    myStack.push(34);

    // 2. Print the size of the stack
    cout << "Size of the stack: " << myStack.size() << endl;

    // 3. Display the value at the top
    if (!myStack.empty()) {
        cout << "Value at the top of the stack: " << myStack.top() << endl;
    } else {
        cout << "The stack is empty." << endl;
    }

    // 4. Delete required elements of the stack so that 30 would be at the top and print the size
    while (!myStack.empty() && myStack.top() != 30) {
        myStack.pop();
    }

    // Print the value at the top and the size after deletion
    if (!myStack.empty()) {
        cout << "Value at the top of the stack after deletions: " << myStack.top() << endl;
    } else {
        cout << "The stack is empty after deletions." << endl;
    }

    cout << "Size of the stack after deletions: " << myStack.size() << endl;

//problem 17
// 1. Input a series of integers and push them inside the queue
    queue<int> myQueue;
    int numbers[] = {5, 3, 10, 32, 95, -4, 29};
    for (int num : numbers) {
        myQueue.push(num);
    }

    // 2. Print the size of the queue
    cout << "Size of the queue: " << myQueue.size() << endl;

    // 3. Display the values that are at front and at back
    if (!myQueue.empty()) {
        cout << "Front of the queue: " << myQueue.front() << endl;
        cout << "Back of the queue: " << myQueue.back() << endl;
    } else {
        cout << "The queue is empty." << endl;
    }

    // 4. Display all elements in the queue
    cout << "Elements in the queue: ";
    displayQueue(myQueue);

    // 5. Delete all elements
    clearQueue(myQueue);

    // Verify the queue is empty
    cout << "Size of the queue after clearing: " << myQueue.size() << endl;

//problem16 

// Input the sequence of numbers
    vector<int> numbers;
    int num;
    cout << "Enter numbers (end with a non-integer input): ";
    while (cin >> num) {
        numbers.push_back(num);
    }

    // Sort the sequence
    sort(numbers.begin(), numbers.end());

    // Check if the sequence is symmetric
    bool symmetric = isSymmetric(numbers);

    // Print the sorted numbers
    cout << "Sorted numbers: ";
    for (int n : numbers) {
        cout << n << " ";
    }
    cout << endl;

    // Print if the sequence is symmetric or not
    if (symmetric) {
        cout << "The sequence is symmetric." << endl;
    } else {
        cout << "The sequence is not symmetric." << endl;
    }

//problem14 

// Input the sequence of numbers
    vector<int> numbers;
    int num;
    cout << "Enter numbers (end with a non-integer input): ";
    while (cin >> num) {
        numbers.push_back(num);
    }

    // Clear the input stream for further operations
    cin.clear();
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    // Create a set to remove duplicates
    set<int> uniqueNumbers(numbers.begin(), numbers.end());

    // Clear the original vector and copy unique elements back into it
    numbers.assign(uniqueNumbers.begin(), uniqueNumbers.end());

    // Print the resulting vector and its size
    cout << "Resulting vector: ";
    for (int n : numbers) {
        cout << n << " ";
    }
    cout << endl;

    cout << "Size of the resulting vector: " << numbers.size() << endl;





    return 0;
}
