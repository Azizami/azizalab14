#include <iostream>
#include <map>
#include <string>
#include <list>
#include <stack>
#include <queue>
#include <vector>
#include <algorithm>



using namespace std;

//problem16

int getLastDigit(int num) {
    return abs(num) % 10;
}

// Function to check if the sequence is symmetric
bool isSymmetric(const vector<int>& vec) {
    int n = vec.size();
    for (int i = 0; i < n / 2; ++i) {
        if (getLastDigit(vec[i]) != getLastDigit(vec[n - i - 1])) {
            return false;
        }
    }
    return true;
}


//problem4 
void displayMap(const map<int, double>& myMap) {
    for (const auto& pair : myMap) {
        cout << "(" << pair.first << ", " << pair.second << ")" << endl;
    }
}

//problem5

void displayMapp(const list<pair<string, int>>& myList) {
    for (const auto& pair : myList) {
        cout << "(" << pair.first << ", " << pair.second << ")" << endl;
    }
}
//problem17

void displayQueue(queue<int> q) {
    while (!q.empty()) {
        cout << q.front() << " ";
        q.pop();
    }
    cout << endl;
}

// Function that deletes all elements from the queue
void clearQueue(queue<int>& q) {
    while (!q.empty()) {
        q.pop();
    }
}

int main() {


    //problem1
    map<int,int> m;
    m[1]=1;
    m[2]=4;
    m[3]=9;
    m[4]=16;
    m[5]=25;
    cout<<"Elelments in the map: ";
    for (const auto &pair:m){
        cout<<"["<<pair.first<<","<<pair.second<<"]"<<endl;


    }
    cout<<endl;
    for(const auto &pair:m){
        cout<<"Square of "<<pair.first<<" is "<<pair.second<<endl;

    }

//problem 2
    map<int,string> math;
    math[4]="Mike";
    math[3]="Elena";
    math[1]="David";
    math[5]="George";
    math[2]="Indira";
    for (const auto &pair:math){
        cout<<pair.first<<" place is "<< pair.second<<endl;
    }

//problem3
    map<char, int> alphabet_positions;
    for (char c = 'A'; c <= 'Z'; ++c) {
        alphabet_positions[c] = c - 'A' + 1;
    }

    // Ask the user to input a letter
    char letter;
    cout << "Enter a letter (uppercase): ";
    cin >> letter;

    // Convert the input letter to uppercase
    letter = toupper(letter);

    // Check if the input is a valid uppercase letter
    if (isalpha(letter) && isupper(letter)) {
        // Get the position of the letter from the map
        int position = alphabet_positions[letter];
        cout << "The position of " << letter << " in the alphabet is " << position << "." << endl;
    } else {
        cout << "Please enter a valid uppercase letter." << endl;
    }

//problem4
map<int, double> myMap = {
            {4, 7.5},
            {25, 6.01},
            {-9, 3.2},
            {12, 5.16}
    };

    // 2. Output each pair of the map
    cout << "Initial map:" << endl;
    displayMap(myMap);

    // 3. Insert a new pair (3, 3.75) and display resulting map
    myMap.insert({3, 3.75});
    cout << "\nMap after inserting (3, 3.75):" << endl;
    displayMap(myMap);

    // 4. Insert a new pair (-10, 4.3) and display resulting map
    myMap.insert({-10, 4.3});
    cout << "\nMap after inserting (-10, 4.3):" << endl;
    displayMap(myMap);

    // 5. Using method .find(), find key 12, store result inside iterator it and print the value
    auto it = myMap.find(12);
    if (it != myMap.end()) {
        cout << "\nValue for key 12: " << it->second << endl;
    } else {
        cout << "\nKey 12 not found." << endl;
    }

    // 6. Using the same iterator, delete pair with key 12 and print resulting map
    if (it != myMap.end()) {
        myMap.erase(it);
        cout << "\nMap after deleting key 12:" << endl;
        displayMap(myMap);
    }

    // 7. Modify a value whose key is -9 to 4.44 and print resulting map
    myMap[-9] = 4.44;
    cout << "\nMap after modifying value for key -9 to 4.44:" << endl;
    displayMap(myMap);

//prblem5 
unordered_map<string, int> myUnorderedMap = {
            {"Earth", 3},
            {"Mercury", 1},
            {"Venus", 2}
    };
    list<pair<string, int>> myList(myUnorderedMap.begin(), myUnorderedMap.end());

    // 2. Display all pairs of the unordered map
    cout << "Initial map:" << endl;
    displayMapp(myList);

    // 3. Insert a pair ("Mars", 4) into the beginning and display the result
    myList.push_front({"Mars", 4});
    cout << "\nMap after inserting (\"Mars\", 4) into the beginning:" << endl;
    displayMapp(myList);

    // 4. Insert a pair ("Saturn", 6) into position 3 and then insert ("Neptune", 8) into the same position, display the result
    auto i = myList.begin();
    advance(i, 3);
    myList.insert(i, {"Saturn", 6});
    i = myList.begin();
    advance(i, 3);
    myList.insert(i, {"Neptune", 8});
    cout << "\nMap after inserting (\"Saturn\", 6) and (\"Neptune\", 8) into position 3:" << endl;
    displayMapp(myList);

    // 5. Display the size of the map
    cout << "\nSize of the map: " << myList.size() << endl;

    // 6. Delete an element with key "Venus" and display the resulting map
    myList.remove_if([](const pair<string, int>& p) { return p.first == "Venus"; });
    cout << "\nMap after deleting key \"Venus\":" << endl;
    displayMapp(myList);


//problem 18

    // 1. Push numbers: 43, 90, 100, 30, 28, 1, 34 into a stack
    stack<int> myStack;
    myStack.push(43);
    myStack.push(90);
    myStack.push(100);
    myStack.push(30);
    myStack.push(28);
    myStack.push(1);
    myStack.push(34);

    // 2. Print the size of the stack
    cout << "Size of the stack: " << myStack.size() << endl;

    // 3. Display the value at the top
    if (!myStack.empty()) {
        cout << "Value at the top of the stack: " << myStack.top() << endl;
    } else {
        cout << "The stack is empty." << endl;
    }

    // 4. Delete required elements of the stack so that 30 would be at the top and print the size
    while (!myStack.empty() && myStack.top() != 30) {
        myStack.pop();
    }

    // Print the value at the top and the size after deletion
    if (!myStack.empty()) {
        cout << "Value at the top of the stack after deletions: " << myStack.top() << endl;
    } else {
        cout << "The stack is empty after deletions." << endl;
    }

    cout << "Size of the stack after deletions: " << myStack.size() << endl;

//problem 17
// 1. Input a series of integers and push them inside the queue
    queue<int> myQueue;
    int numbers[] = {5, 3, 10, 32, 95, -4, 29};
    for (int num : numbers) {
        myQueue.push(num);
    }

    // 2. Print the size of the queue
    cout << "Size of the queue: " << myQueue.size() << endl;

    // 3. Display the values that are at front and at back
    if (!myQueue.empty()) {
        cout << "Front of the queue: " << myQueue.front() << endl;
        cout << "Back of the queue: " << myQueue.back() << endl;
    } else {
        cout << "The queue is empty." << endl;
    }

    // 4. Display all elements in the queue
    cout << "Elements in the queue: ";
    displayQueue(myQueue);

    // 5. Delete all elements
    clearQueue(myQueue);

    // Verify the queue is empty
    cout << "Size of the queue after clearing: " << myQueue.size() << endl;

//problem16 

// Input the sequence of numbers
    vector<int> numbers;
    int num;
    cout << "Enter numbers (end with a non-integer input): ";
    while (cin >> num) {
        numbers.push_back(num);
    }

    // Sort the sequence
    sort(numbers.begin(), numbers.end());

    // Check if the sequence is symmetric
    bool symmetric = isSymmetric(numbers);

    // Print the sorted numbers
    cout << "Sorted numbers: ";
    for (int n : numbers) {
        cout << n << " ";
    }
    cout << endl;

    // Print if the sequence is symmetric or not
    if (symmetric) {
        cout << "The sequence is symmetric." << endl;
    } else {
        cout << "The sequence is not symmetric." << endl;
    }

//problem14 

// Input the sequence of numbers
    vector<int> numbers;
    int num;
    cout << "Enter numbers (end with a non-integer input): ";
    while (cin >> num) {
        numbers.push_back(num);
    }

    // Clear the input stream for further operations
    cin.clear();
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    // Create a set to remove duplicates
    set<int> uniqueNumbers(numbers.begin(), numbers.end());

    // Clear the original vector and copy unique elements back into it
    numbers.assign(uniqueNumbers.begin(), uniqueNumbers.end());

    // Print the resulting vector and its size
    cout << "Resulting vector: ";
    for (int n : numbers) {
        cout << n << " ";
    }
    cout << endl;

    cout << "Size of the resulting vector: " << numbers.size() << endl;



    return 0;
}
